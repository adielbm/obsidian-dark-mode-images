/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DarkModeImagesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DarkModeImagesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
  containerEl.createEl("h2", { text: "Dark Mode Images settings" });
    const input = containerEl.createEl("input", { type: "text" });
    input.value = this.plugin.settings.extensions.join(", ");
    input.style.width = "100%";
    input.placeholder = "e.g. svg, png, gif";
    const desc = containerEl.createEl("div", { text: "Comma-separated list of extensions (without dot). The filter will apply to images whose src ends with these extensions." });
    desc.style.marginBottom = "8px";
    const saveBtn = containerEl.createEl("button", { text: "Save" });
    saveBtn.style.marginTop = "8px";
    saveBtn.addEventListener("click", async () => {
      const raw = input.value;
      const exts = raw.split(",").map((s) => s.trim()).filter(Boolean).map((s) => s.startsWith(".") ? s.slice(1) : s);
      this.plugin.settings.extensions = exts;
      await this.plugin.saveSettings();
    });
  }
};
var DEFAULT_SETTINGS = {
  extensions: ["svg", "png", "gif"]
};
var DarkModeImagesPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.svgFilterElement = null;
    this.styleElement = null;
    // Settings
    this.settings = {};
  }
  // Persisted settings helpers
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateCSS();
  }
  async onload() {
  console.log("Loading Dark Mode Images plugin");
    await this.loadSettings();
  console.debug("DarkModeImages \u2013 generated CSS:\n", this.generateCSSForExtensions(this.settings.extensions));
    this.injectSVGFilter();
    this.injectCSS();
  this.addSettingTab(new DarkModeImagesSettingTab(this.app, this));
  }
  onunload() {
  console.log("Unloading Dark Mode Images plugin");
    if (this.svgFilterElement && this.svgFilterElement.parentNode) {
      this.svgFilterElement.parentNode.removeChild(this.svgFilterElement);
    }
    if (this.styleElement && this.styleElement.parentNode) {
      this.styleElement.parentNode.removeChild(this.styleElement);
    }
  }
  injectSVGFilter() {
    const svgFilter = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgFilter.style.position = "fixed";
    svgFilter.style.left = "0";
    svgFilter.style.top = "0";
    svgFilter.style.width = "0";
    svgFilter.style.height = "0";
    svgFilter.style.pointerEvents = "none";
    svgFilter.innerHTML = `
			<defs>
				<filter id="invert-luminance" color-interpolation-filters="linearRGB">
					<feComponentTransfer>
						<feFuncR type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncG type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncB type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncA type="gamma" amplitude="1" exponent="1" offset="0.0"/>
					</feComponentTransfer>
					<feColorMatrix type="matrix" values="
						1.000 -1.000 -1.000 0.000 1.000
					   -1.000 1.000 -1.000 0.000 1.000
					   -1.000 -1.000 1.000 0.000 1.000
						0.000 0.000 0.000 1.000 0.000
					"/>
				</filter>
			</defs>
		`;
    document.body.appendChild(svgFilter);
    this.svgFilterElement = svgFilter;
  }
  injectCSS() {
    const style = document.createElement("style");
  style.setAttribute("data-darkmode-images", "true");
    style.textContent = this.generateCSSForExtensions(this.settings.extensions);
    document.head.appendChild(style);
    this.styleElement = style;
  }
  // Update the existing injected style element (or inject if missing)
  updateCSS() {
    const css = this.generateCSSForExtensions(this.settings.extensions);
    if (this.styleElement) {
      this.styleElement.textContent = css;
    } else {
      this.injectCSS();
    }
  }
  // Generate a compact CSS rule using :is() and configured extensions
  generateCSSForExtensions(extensions) {
    const exts = Array.from(new Set(
      extensions.map((e) => e.trim().toLowerCase()).filter(Boolean).map((e) => e.startsWith(".") ? e.slice(1) : e)
    ));
    if (exts.length === 0) {
      return "";
    }
    const attrSelectors = exts.map((ext) => `img[src*=".${ext}"]`).join(", ");
    const contexts = [
      "body.theme-dark",
      "body.is-dark",
      ".theme-dark"
    ];
    const inner = ":is(.markdown-preview-view, .cm-editor)";
    const selector = contexts.map((ctx) => `${ctx} ${inner} ${exts.length === 1 ? `img[src*=".${exts[0]}"]` : `:is(${exts.map((ext) => `img[src*=".${ext}"]`).join(",")})`}`).join(",\n	");
    return `/* Apply SVG filter to configured image extensions in dark mode */
	${selector} {
		filter: url(#invert-luminance) !important;
	}`;
  }
};
//# sourceMappingURL=data:application/json;base64,

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DarkModeSVGFilterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DarkModeSVGFilterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.svgFilterElement = null;
    this.styleElement = null;
  }
  async onload() {
    console.log("Loading Dark Mode SVG Filter plugin");
    this.injectSVGFilter();
    this.injectCSS();
  }
  onunload() {
    console.log("Unloading Dark Mode SVG Filter plugin");
    if (this.svgFilterElement && this.svgFilterElement.parentNode) {
      this.svgFilterElement.parentNode.removeChild(this.svgFilterElement);
    }
    if (this.styleElement && this.styleElement.parentNode) {
      this.styleElement.parentNode.removeChild(this.styleElement);
    }
  }
  injectSVGFilter() {
    const svgFilter = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgFilter.style.position = "fixed";
    svgFilter.style.left = "0";
    svgFilter.style.top = "0";
    svgFilter.style.width = "0";
    svgFilter.style.height = "0";
    svgFilter.style.pointerEvents = "none";
    svgFilter.innerHTML = `
			<defs>
				<filter id="invert-luminance" color-interpolation-filters="linearRGB">
					<feComponentTransfer>
						<feFuncR type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncG type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncB type="gamma" amplitude="1" exponent="0.5" offset="0.0"/>
						<feFuncA type="gamma" amplitude="1" exponent="1" offset="0.0"/>
					</feComponentTransfer>
					<feColorMatrix type="matrix" values="
						1.000 -1.000 -1.000 0.000 1.000
					   -1.000 1.000 -1.000 0.000 1.000
					   -1.000 -1.000 1.000 0.000 1.000
						0.000 0.000 0.000 1.000 0.000
					"/>
				</filter>
			</defs>
		`;
    document.body.appendChild(svgFilter);
    this.svgFilterElement = svgFilter;
  }
  injectCSS() {
    const style = document.createElement("style");
    style.setAttribute("data-darkmode-svg-filter", "true");
    style.textContent = `
			/* Apply SVG filter to img elements with SVG sources in dark mode */
			body.theme-dark .markdown-preview-view img[src*=".svg"],
			body.theme-dark .cm-editor img[src*=".svg"],
			body.is-dark .markdown-preview-view img[src*=".svg"],
			body.is-dark .cm-editor img[src*=".svg"],
			.theme-dark .markdown-preview-view img[src*=".svg"],
			.theme-dark .cm-editor img[src*=".svg"] {
				filter: url(#invert-luminance) !important;
			}
			
			/* Ensure no filter in light mode */
			body:not(.theme-dark):not(.is-dark) .markdown-preview-view img[src*=".svg"],
			body:not(.theme-dark):not(.is-dark) .cm-editor img[src*=".svg"] {
				filter: none !important;
			}
		`;
    document.head.appendChild(style);
    this.styleElement = style;
  }
};

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DarkModeImagesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DarkModeImagesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("File extensions").setDesc("Comma-separated list of file extensions (without dots) to apply the dark mode adaptation to.").addText((text) => text.setPlaceholder("e.g. svg, png, gif").setValue(this.plugin.settings.extensions.join(", ")).onChange(async (value) => {
      const extensions = value.split(",").map((ext) => ext.trim()).filter(Boolean).map((ext) => ext.startsWith(".") ? ext.slice(1) : ext);
      this.plugin.settings.extensions = extensions;
      await this.plugin.saveSettings();
    }));
  }
};
var DEFAULT_SETTINGS = {
  extensions: ["svg", "png", "gif"]
};
var DarkModeImagesPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.svgFilterElement = null;
    this.observer = null;
    this.settings = {};
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateImageClasses();
  }
  async onload() {
    await this.loadSettings();
    this.injectSVGFilter();
    this.updateImageClasses();
    this.startObserver();
    this.addSettingTab(new DarkModeImagesSettingTab(this.app, this));
  }
  onunload() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
    if (this.svgFilterElement && this.svgFilterElement.parentNode) {
      this.svgFilterElement.parentNode.removeChild(this.svgFilterElement);
    }
    const allImages = document.querySelectorAll("img.dark-mode-images-img");
    allImages.forEach((img) => img.classList.remove("dark-mode-images-img"));
  }
  startObserver() {
    this.observer = new MutationObserver((mutations) => {
      let shouldUpdate = false;
      mutations.forEach((mutation) => {
        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node;
              if (element.tagName === "IMG" || element.querySelector("img")) {
                shouldUpdate = true;
              }
            }
          });
        }
      });
      if (shouldUpdate) {
        this.updateImageClasses();
      }
    });
    this.observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  injectSVGFilter() {
    const svgFilter = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgFilter.setAttribute("id", "dark-mode-images-svg");
    const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
    const filter = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    filter.setAttribute("id", "dark-mode-images-svg-filter");
    filter.setAttribute("color-interpolation-filters", "linearRGB");
    const feComponentTransfer = document.createElementNS("http://www.w3.org/2000/svg", "feComponentTransfer");
    const feFuncR = document.createElementNS("http://www.w3.org/2000/svg", "feFuncR");
    feFuncR.setAttribute("type", "gamma");
    feFuncR.setAttribute("amplitude", "1");
    feFuncR.setAttribute("exponent", "0.5");
    feFuncR.setAttribute("offset", "0.0");
    const feFuncG = document.createElementNS("http://www.w3.org/2000/svg", "feFuncG");
    feFuncG.setAttribute("type", "gamma");
    feFuncG.setAttribute("amplitude", "1");
    feFuncG.setAttribute("exponent", "0.5");
    feFuncG.setAttribute("offset", "0.0");
    const feFuncB = document.createElementNS("http://www.w3.org/2000/svg", "feFuncB");
    feFuncB.setAttribute("type", "gamma");
    feFuncB.setAttribute("amplitude", "1");
    feFuncB.setAttribute("exponent", "0.5");
    feFuncB.setAttribute("offset", "0.0");
    const feFuncA = document.createElementNS("http://www.w3.org/2000/svg", "feFuncA");
    feFuncA.setAttribute("type", "gamma");
    feFuncA.setAttribute("amplitude", "1");
    feFuncA.setAttribute("exponent", "1");
    feFuncA.setAttribute("offset", "0.0");
    const feColorMatrix = document.createElementNS("http://www.w3.org/2000/svg", "feColorMatrix");
    feColorMatrix.setAttribute("type", "matrix");
    feColorMatrix.setAttribute("values", `
			1.000 -1.000 -1.000 0.000 1.000
		   -1.000 1.000 -1.000 0.000 1.000
		   -1.000 -1.000 1.000 0.000 1.000
			0.000 0.000 0.000 1.000 0.000
		`);
    feComponentTransfer.appendChild(feFuncR);
    feComponentTransfer.appendChild(feFuncG);
    feComponentTransfer.appendChild(feFuncB);
    feComponentTransfer.appendChild(feFuncA);
    filter.appendChild(feComponentTransfer);
    filter.appendChild(feColorMatrix);
    defs.appendChild(filter);
    svgFilter.appendChild(defs);
    document.body.appendChild(svgFilter);
    this.svgFilterElement = svgFilter;
  }
  // Add CSS classes to images that match user-configured extensions
  updateImageClasses() {
    const exts = Array.from(new Set(
      this.settings.extensions.map((e) => e.trim().toLowerCase()).filter(Boolean).map((e) => e.startsWith(".") ? e.slice(1) : e)
    ));
    const allImages = document.querySelectorAll("img.dark-mode-images-img");
    allImages.forEach((img) => img.classList.remove("dark-mode-images-img"));
    if (exts.length === 0)
      return;
    const images = document.querySelectorAll(":is(.markdown-preview-view, .cm-editor) img[src]");
    images.forEach((img) => {
      const src = img.src;
      if (src && exts.some((ext) => src.toLowerCase().includes(`.${ext}`))) {
        img.classList.add("dark-mode-images-img");
      }
    });
  }
};
